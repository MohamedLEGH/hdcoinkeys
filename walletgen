#!/usr/bin/env node
'use strict';

var ArgumentParser = require('argparse').ArgumentParser;

var library = require('./library')

var coins = ['bitcoin','bitcoin-testnet','ethereum']

var parser = new ArgumentParser({
  version: '0.0.1',
  addHelp:true,
  description: 'HD Wallet generator',
});

parser.addArgument(
  [ '-m', '--mnemonic' ],
  {
    help: 'generate 24 mnemonic words and the equivalent seed and output them in the commandline',
    action: 'storeTrue'
  }
);

parser.addArgument(
  [ '-w', '--words' ],
  {
    help: 'generate 24 mnemonic words and output it in the commandline',
    action: 'storeTrue'
  }
);

parser.addArgument(
  [ '-s', '--seed' ],
  {
    help: 'generate a seed and output it in the commandline',
    action: 'storeTrue'
  }
);

parser.addArgument(
  ['--seedfromwords' ],
  {
    help: 'get seed from 24 words (input a string)',
    action: 'store'
  }
);

function print_words(){
    const mnemo = library.create_mnemonic()
    console.log(mnemo[0])
}

function print_seed(){
    const mnemo = library.create_mnemonic()
    console.log(mnemo[1].toString('hex'))
}

function print_mnemonic(){
    const mnemo = library.create_mnemonic()
    console.log("Your 24 mnemonic words are: \n" + mnemo[0] + "\n")
    console.log("The equivalent master seed is: \n" + mnemo[1].toString('hex') + "\n")
}

function get_privatekey(data){
    return data[0].toString('hex')
}

function get_address(data){
    return data[1]

}

function print_accountfromseed(words,network,account_number){

    if(!coins.includes(network)){
        throw "Wrong Network : should be ethereum or bitcoin or bitcoin-testnet!"
    }
    data = library.account_from_seed(seed,accoun_number,network)
    if(network === "bitcoin"){
        console.log("private key : " + data[0].hex() + "\n")
        console.log("WIF : " + data[2] + "\n")
        console.log("public key : " + data[3].hex() + "\n")
        console.log("address : " + data[1] + "\n")
    }
    else if(network === "bitcoin-testnet"){
        console.log("private key : " + data[0].hex() + "\n")
        console.log("WIF : " + data[2] + "\n")
        console.log("public key : " + data[3].hex() + "\n")
        console.log("address : " + data[1] + "\n")
    }
    else if(network === "ethereum"){
        console.log("private key : " + data[0].hex() + "\n")
        console.log("address : " + data[1] + "\n")                        
    }
}

function print_accountfromseed(words,network,account_number){
    const seed = library.create_seed(words)
    print_accountfromseed(words,network,account_number)
}

function print_privatekey(seed,network,account_number){

    if(!coins.includes(network)){
        throw "Wrong Network : should be ethereum or bitcoin or bitcoin-testnet!"
    }
    const data = library.account_from_seed(seed,accoun_number,network)
    console.log(get_privatekey(data).toString('hex'))
}

function print_address(seed,network,account_number){

    if(!coins.includes(network)){
        throw "Wrong Network : should be ethereum or bitcoin or bitcoin-testnet!"
    }
    const data = library.account_from_seed(seed,accoun_number,network)
    console.log(get_address(data).toString('hex'))
}


var args = parser.parseArgs();
console.dir(args);

const vals = Object.values(args)
const nb = vals.filter(Boolean).length

if(nb>1){
    throw "Error : too many arguments"
}

if(args['mnemonic']){
    print_mnemonic()

}

else if(args['words']){
    print_words()
}

else if(args['seed']){
    print_seed()
}

if(args['seedfromwords']){
    const words = args['seedfromwords']
    const seed = library.create_seed(words)
    console.log(seed.toString('hex'))
}
